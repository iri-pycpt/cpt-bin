{% set version = "17.8.2" %}

package:
  name: cptbin
  version: {{ version }}

source:
  - url: https://academiccommons.columbia.edu/doi/10.7916/wehb-sq76/download  # [not win]
    fn: CPT.{{ version }}.tar.gz  # [not win]
    sha256: a6ec2dd00aee284cce2834359cd467dbbad5e87450b0a1db8c77889f8ef28118  # [not win]
    patches:  # [not win]
      - patch  # [not win]

  - url: https://academiccommons.columbia.edu/doi/10.7916/ma14-2m65/download  # [win]
    fn: CPT_batch_installation_{{ version }}.exe  # [win]
    sha256: e0276cc51809fa678fbb8da3d18de8238490a60f5dcb73fb72130f8d55a03fae  # [win]

build:
  number: 0

requirements:
  build:
    - make  # [not win]
    - {{ compiler('fortran') }}  # [not win]

    # I think this is the default when building with conda-smithy, but
    # when building manually with conda-build it's easy to forget to
    # exclude the defaults channels and end up with a mix of centos
    # packages from conda-forge and centos7 packages from defaults,
    # resulting in a failed build. In that situation, this constraint
    # makes the build fail faster so you can fix the command line.
    - sysroot_linux-64 2.12  # [linux64]

test:
  commands:
    - echo 0 | "$CONDA_PREFIX/bin/CPT.x" | grep "International Research Institute"  # [not win]
    - echo 0 | "%CONDA_PREFIX%\Library\opt\cpt\CPT_batch.exe" | find "International Research Institute"  # [win]

about:
  home: https://iri.columbia.edu/our-expertise/climate/tools/cpt/
  summary: 'The Climate Predictability Tool'
  description: |
    The Climate Predictability Tool (CPT) is a software package for
    constructing a seasonal climate forecast model, performing model
    validation, and producing forecasts given updated data. Its design
    has been tailored for producing seasonal climate forecasts using
    model output statistic (MOS) corrections to climate predictions
    from general circulation model (GCM), or for producing forecasts
    using fields of sea-surface temperatures or similar
    predictors. Although the software is specifically tailored for
    these applications, it can be used in more general settings to
    perform canonical correlation analysis (CCA), principal components
    regression (PCR), or multiple linear regression (MLR) on any data,
    and for any application.
  license_file:
    # Would rather get the licenses directly from the source package,
    # but conda-build can't automaticaly extract files from the
    # windows exe installer, so keeping copies of the licenses in the
    # recipe for now.
    # - {{ version }}/LICENSE  # [not win]
    # - {{ version }}/lapack/lapack/LICENSE  # [not win]
    - LICENSE
    - vendor-licenses/
